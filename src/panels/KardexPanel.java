/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Panels;

import Clases.Kardex;
import Clases.KardexMovs;
import Clases.exportarExcel;
import Clases.tools;
import Frames.KardexFrame;
import Frames.MainFrame;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import rojerusan.RSNotifyFade;

/**
 *
 * @author Family
 */
public class KardexPanel extends javax.swing.JPanel {

    static ArrayList<Kardex> movimientos = new ArrayList();

    public KardexPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TablaOpciones = new javax.swing.JPopupMenu();
        verDetalles = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new rojerusan.RSTableMetro();
        jLabel1 = new javax.swing.JLabel();
        cantidadRegistrosCombo = new rojerusan.RSComboBox();
        rSButtonEffect1 = new rojeru_san.rsbutton.RSButtonEffect();
        agregarBtn = new rojeru_san.rsbutton.RSButtonEffect();
        editBtn = new rojeru_san.rsbutton.RSButtonEffect();
        rSButtonEffect2 = new rojeru_san.rsbutton.RSButtonEffect();
        cancelBtn = new rojeru_san.rsbutton.RSButtonEffect();
        cancelBtn1 = new rojeru_san.rsbutton.RSButtonEffect();

        verDetalles.setBackground(new java.awt.Color(0, 102, 102));
        verDetalles.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_search_32px.png"))); // NOI18N
        verDetalles.setText("Ver Detalles");
        verDetalles.setContentAreaFilled(false);
        verDetalles.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        verDetalles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                verDetallesMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                verDetallesMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                verDetallesMousePressed(evt);
            }
        });
        verDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verDetallesActionPerformed(evt);
            }
        });
        TablaOpciones.add(verDetalles);

        setBackground(new java.awt.Color(59, 59, 59));

        jScrollPane1.setAutoscrolls(true);

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "#", "Fecha", "Cliente", "Articulos", "Tipo Movimiento", "Total Valorizado", "Usuario", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.setBackgoundHead(new java.awt.Color(148, 34, 36));
        tabla.setBackgoundHover(new java.awt.Color(139, 183, 240));
        tabla.setColorBorderHead(new java.awt.Color(59, 59, 59));
        tabla.setColorBorderRows(new java.awt.Color(59, 59, 59));
        tabla.setColorSecondary(new java.awt.Color(255, 255, 255));
        tabla.setComponentPopupMenu(TablaOpciones);
        tabla.setGridColor(new java.awt.Color(59, 59, 59));
        tabla.setSelectionBackground(new java.awt.Color(194, 232, 255));
        tabla.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setMinWidth(60);
            tabla.getColumnModel().getColumn(0).setPreferredWidth(60);
            tabla.getColumnModel().getColumn(0).setMaxWidth(60);
            tabla.getColumnModel().getColumn(1).setMinWidth(110);
            tabla.getColumnModel().getColumn(1).setPreferredWidth(110);
            tabla.getColumnModel().getColumn(1).setMaxWidth(130);
            tabla.getColumnModel().getColumn(2).setMinWidth(95);
            tabla.getColumnModel().getColumn(2).setPreferredWidth(95);
            tabla.getColumnModel().getColumn(3).setMinWidth(95);
            tabla.getColumnModel().getColumn(3).setPreferredWidth(95);
            tabla.getColumnModel().getColumn(3).setMaxWidth(115);
            tabla.getColumnModel().getColumn(4).setMinWidth(130);
            tabla.getColumnModel().getColumn(4).setPreferredWidth(130);
            tabla.getColumnModel().getColumn(4).setMaxWidth(135);
            tabla.getColumnModel().getColumn(5).setMinWidth(105);
            tabla.getColumnModel().getColumn(5).setPreferredWidth(105);
            tabla.getColumnModel().getColumn(5).setMaxWidth(120);
            tabla.getColumnModel().getColumn(6).setMinWidth(120);
            tabla.getColumnModel().getColumn(6).setPreferredWidth(120);
            tabla.getColumnModel().getColumn(6).setMaxWidth(120);
            tabla.getColumnModel().getColumn(7).setMinWidth(95);
            tabla.getColumnModel().getColumn(7).setPreferredWidth(95);
            tabla.getColumnModel().getColumn(7).setMaxWidth(95);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Cant. Reg");

        cantidadRegistrosCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "100", "300", "500", "1000", "Todos" }));
        cantidadRegistrosCombo.setColorArrow(new java.awt.Color(255, 255, 255));
        cantidadRegistrosCombo.setColorBoton(new java.awt.Color(0, 37, 64));

        rSButtonEffect1.setBackground(new java.awt.Color(59, 59, 59));
        rSButtonEffect1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_search_32px.png"))); // NOI18N
        rSButtonEffect1.setToolTipText("Actualizar Registro de Kardex");
        rSButtonEffect1.setColorHover(new java.awt.Color(102, 102, 102));
        rSButtonEffect1.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        rSButtonEffect1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonEffect1ActionPerformed(evt);
            }
        });

        agregarBtn.setBackground(new java.awt.Color(59, 59, 59));
        agregarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_add_32px.png"))); // NOI18N
        agregarBtn.setToolTipText("Agregar nuevo Movimiento de Inv.");
        agregarBtn.setColorHover(new java.awt.Color(102, 102, 102));
        agregarBtn.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        agregarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(59, 59, 59));
        editBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_edit_32px_3.png"))); // NOI18N
        editBtn.setToolTipText("Editar Movimiento seleccionado");
        editBtn.setColorHover(new java.awt.Color(102, 102, 102));
        editBtn.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        rSButtonEffect2.setBackground(new java.awt.Color(59, 59, 59));
        rSButtonEffect2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_microsoft_excel_32px.png"))); // NOI18N
        rSButtonEffect2.setToolTipText("Generar Excel con los datos de la tabla");
        rSButtonEffect2.setColorHover(new java.awt.Color(102, 102, 102));
        rSButtonEffect2.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        rSButtonEffect2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonEffect2ActionPerformed(evt);
            }
        });

        cancelBtn.setBackground(new java.awt.Color(59, 59, 59));
        cancelBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_cancel_32px.png"))); // NOI18N
        cancelBtn.setToolTipText("Cancelar Avances.");
        cancelBtn.setColorHover(new java.awt.Color(102, 102, 102));
        cancelBtn.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        cancelBtn1.setBackground(new java.awt.Color(59, 59, 59));
        cancelBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/icons8_restore_32px_1.png"))); // NOI18N
        cancelBtn1.setText("Días para Modificar Kardex");
        cancelBtn1.setToolTipText("Actualizar dias para Modificar Kardex");
        cancelBtn1.setColorHover(new java.awt.Color(102, 102, 102));
        cancelBtn1.setEfecto(rojeru_san.rsbutton.RSButtonEffect.EFECTO.RIPPLE);
        cancelBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(agregarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 864, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cantidadRegistrosCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rSButtonEffect1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rSButtonEffect2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(agregarBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(editBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cancelBtn1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(rSButtonEffect1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rSButtonEffect2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cantidadRegistrosCombo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rSButtonEffect1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonEffect1ActionPerformed
        getMovimientosLikeAll();

    }//GEN-LAST:event_rSButtonEffect1ActionPerformed

    private void agregarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarBtnActionPerformed
        new KardexFrame().setVisible(true);
    }//GEN-LAST:event_agregarBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        int row = tabla.getSelectedRow();
        if (row > -1) {
            if (validarModificacion() == true) {
                int id = Integer.valueOf(tabla.getValueAt(row, 0).toString());
                for (Kardex k : movimientos) {
                    if (k.getId() == id) {
                        new KardexFrame(k, "editar",validarModificacion()).setVisible(true);
                    }
                }
            }
        }


    }//GEN-LAST:event_editBtnActionPerformed

    private void rSButtonEffect2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonEffect2ActionPerformed
        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        if (modelo.getRowCount() < 1) {
            new rojerusan.RSNotifyFade("¡¡No hay Datos!!", "Para exportar datos a Excel debe existir al menos 01 resultado", 3, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.INFORMATION).setVisible(true);
        } else {
            try {
                new exportarExcel().exportarExcel(tabla, "Movimientos-Kardex");
            } catch (IOException ex) {
                Logger.getLogger(InventarioPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_rSButtonEffect2ActionPerformed

    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        int row = tabla.getSelectedRow();
        if (evt.getClickCount() == 1) {

        } else if (evt.getClickCount() == 2 && row > -1) {
            int id = Integer.valueOf(tabla.getValueAt(row, 0).toString());
            for (Kardex k : movimientos) {
                if (k.getId() == id) {
                    new KardexFrame(k, "ver",validarModificacion()).setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_tablaMouseClicked

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        getMovimientosGeneral();
        tabla.setEnabled(true);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void verDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verDetallesActionPerformed
        int row = tabla.getSelectedRow();
        if (row >= 0) {
            int id = Integer.valueOf(tabla.getValueAt(row, 0).toString());
            for (Kardex k : movimientos) {
                if (k.getId() == id) {
                    new KardexFrame(k, "ver",validarModificacion()).setVisible(true);
                }
            }
        }


    }//GEN-LAST:event_verDetallesActionPerformed

    private void verDetallesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verDetallesMousePressed

    }//GEN-LAST:event_verDetallesMousePressed

    private void verDetallesMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verDetallesMouseEntered
        verDetalles.setContentAreaFilled(true);
    }//GEN-LAST:event_verDetallesMouseEntered

    private void verDetallesMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verDetallesMouseExited
        verDetalles.setContentAreaFilled(false);
    }//GEN-LAST:event_verDetallesMouseExited

    private void cancelBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtn1ActionPerformed
        MainFrame.setDiasModificarKardex(new KardexMovs().getDiasModificarKarfex());
        new rojerusan.RSNotifyFade("¡¡Actualizado!! ", "Se actualizó el valor. Los días actuales para modificar el Kardex son de " + MainFrame.getDiasModificarKardex() + " dias", 5, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.INFORMATION).setVisible(true);

    }//GEN-LAST:event_cancelBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu TablaOpciones;
    public rojeru_san.rsbutton.RSButtonEffect agregarBtn;
    private rojeru_san.rsbutton.RSButtonEffect cancelBtn;
    private rojeru_san.rsbutton.RSButtonEffect cancelBtn1;
    private static rojerusan.RSComboBox cantidadRegistrosCombo;
    public rojeru_san.rsbutton.RSButtonEffect editBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private rojeru_san.rsbutton.RSButtonEffect rSButtonEffect1;
    private rojeru_san.rsbutton.RSButtonEffect rSButtonEffect2;
    public static rojerusan.RSTableMetro tabla;
    private javax.swing.JMenuItem verDetalles;
    // End of variables declaration//GEN-END:variables

    //getLastKardexMovs
    public static void getMovimientosGeneral() {

        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
        if (movimientos.size() > 0) {
            movimientos.clear();
        }
        int cantidadx = Integer.parseInt(cantidadRegistrosCombo.getSelectedItem().toString());
        movimientos = (ArrayList) new Kardex().listKardex(-1).clone();
        DashBoard02.setMovimientos(movimientos);

        for (Kardex km : movimientos) {
            modelo.addRow(new Object[]{
                km.getId(), km.getFecha(), km.getCliente(),
                km.getCantidadArticulos(), km.getTipoMovimiento(),
                km.getTotalValorizado(), km.getUsuario(),km.getEstado()
            });

        }
    }

    public static void getMovimientosLikeAll() {

        DefaultTableModel modelo = (DefaultTableModel) tabla.getModel();
        modelo.setRowCount(0);
        if (movimientos.size() > 0) {
            movimientos.clear();
        }
        String codigox = "";
        String tipoRegistrox = "";
        String tipoDocumentox = "";
        String estadox = "";
        String fecha1x = "2000-01-01";
        String ano = new SimpleDateFormat("yyyy").format(new Date());
        String fecha2x = ano + "-12-31";
        int cantidadx = Integer.parseInt(cantidadRegistrosCombo.getSelectedItem().toString());

        movimientos = (ArrayList) new Kardex().listKardex(-1).clone();

        for (Kardex km : movimientos) {
            modelo.addRow(new Object[]{//km.getNombre()
                km.getId(), km.getFecha(), km.getCliente(),
                km.getCantidadArticulos(), km.getTipoMovimiento(),
                km.getTotalValorizado(), km.getUsuario(),km.getEstado()
            });

        }
    }

    private boolean validarModificacion() {
        boolean llave = false;

        //if(tabla.getSelectedRow()>=0){
        try {
            int restriccion = MainFrame.getDiasModificarKardex();
            String fechaTabla = tabla.getValueAt(tabla.getSelectedRow(), 1).toString();
            Date fechaRegistro = new SimpleDateFormat("yyyy-MM-dd").parse(fechaTabla.replace("/", "-"));
            String fechaActualString = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            Date fechaActual = new SimpleDateFormat("yyyy-MM-dd").parse(fechaActualString);

            if (new tools().diferenciaFecha(fechaTabla + "", fechaActualString) > restriccion) {
                new rojerusan.RSNotifyFade("¡¡Modificiación no Disponible!! ", "Solo se Permite modificar un registro de Kardex hasta " + restriccion + " días luego de ser creada.", 5, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.INFORMATION).setVisible(true);
            } else {
                int fila = tabla.getSelectedRow();
                String tipo = tabla.getValueAt(fila, 3).toString();
                if (tipo.equalsIgnoreCase("anulado")) {
                    new rojerusan.RSNotifyFade("¡¡Kardex Anulado!! ", "No se puede modificar un Kardex Anulado", 5, RSNotifyFade.PositionNotify.BottomRight, RSNotifyFade.TypeNotify.INFORMATION).setVisible(true);

                } else {
                    llave = true;
                }

            }
        } catch (ParseException ex) {
            Logger.getLogger(KardexPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        //}

        return llave;
    }

}
